# LoL Nexus Compute Fabric - Trinity Convergence Makefile
# Production-ready build system for PONGEX + omniterm + OMNIMESH integration
# Architect: LoL Nexus Core Actualization Agent
# Build Date: 2025-07-25

.PHONY: all build test clean health deploy setup install codebase-map
.DEFAULT_GOAL := all

# Project Configuration
PROJECT_NAME := lol-nexus-compute-fabric
VERSION := 1.0.0
ARCHITECTURE := trinity-convergence

# Directory Structure
CORE_DIR := core
INTERFACES_DIR := interfaces  
PLATFORM_DIR := platform
AUTOMATION_DIR := automation
CONFIG_DIR := config

# Build Targets
RUST_ENGINE := $(PLATFORM_DIR)/rust_engine
GO_PROXIES := $(CORE_DIR)/fabric_proxies
PYTHON_AGENTS := $(CORE_DIR)/agents
WEB_FRONTEND := $(INTERFACES_DIR)/web_frontend
CLI_INTERFACE := $(INTERFACES_DIR)/cli

# Python Configuration
PYTHON := python3
VENV := venv
VENV_BIN := $(VENV)/bin
PIP := $(VENV_BIN)/pip
PYTEST := $(VENV_BIN)/pytest

# Go Configuration  
GO := go
GO_BUILD_FLAGS := -ldflags="-s -w" -trimpath

# Rust Configuration
CARGO := cargo
RUST_TARGET := x86_64-unknown-linux-gnu
RUST_BUILD_FLAGS := --release --target $(RUST_TARGET)

# Node.js Configuration
NPM := npm
NODE_MODULES := $(WEB_FRONTEND)/node_modules

# Colors for output
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
PURPLE := \033[0;35m
NC := \033[0m

define print_banner
	@echo -e "$(PURPLE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo -e "$(PURPLE)‚ïë                üåü LoL Nexus Compute Fabric                   ‚ïë$(NC)"
	@echo -e "$(PURPLE)‚ïë                Trinity Convergence v$(VERSION)                    ‚ïë$(NC)"
	@echo -e "$(PURPLE)‚ïë       PONGEX Core + omniterm Interface + OMNIMESH Platform   ‚ïë$(NC)"
	@echo -e "$(PURPLE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo
endef

# Default target - build everything
all: banner setup build test health
	@echo -e "$(GREEN)‚úÖ Trinity Convergence build complete!$(NC)"
	@echo -e "$(BLUE)üöÄ Ready for deployment: make deploy$(NC)"

# Print project banner
banner:
	$(call print_banner)

# Setup development environment
setup: $(VENV) $(NODE_MODULES) go-deps rust-deps
	@echo -e "$(GREEN)‚úÖ Trinity development environment ready$(NC)"

# Create Python virtual environment
$(VENV):
	@echo -e "$(BLUE)üêç Setting up Python virtual environment...$(NC)"
	$(PYTHON) -m venv $(VENV)
	$(PIP) install --upgrade pip setuptools wheel
	$(PIP) install -r requirements.txt
	@touch $(VENV)

# Install Node.js dependencies
$(NODE_MODULES):
	@echo -e "$(BLUE)üì¶ Installing Node.js dependencies...$(NC)"
	cd $(WEB_FRONTEND) && $(NPM) install
	@touch $(NODE_MODULES)

# Install Go dependencies
go-deps:
	@echo -e "$(BLUE)üêπ Installing Go dependencies...$(NC)"
	cd $(GO_PROXIES) && $(GO) mod download
	cd $(GO_PROXIES) && $(GO) mod tidy

# Setup Rust dependencies
rust-deps:
	@echo -e "$(BLUE)ü¶Ä Setting up Rust dependencies...$(NC)"
	cd $(RUST_ENGINE) && $(CARGO) fetch

# Build all Trinity components
build: build-rust build-go build-python build-frontend
	@echo -e "$(GREEN)‚úÖ All Trinity components built successfully$(NC)"

# Build Rust platform engine
build-rust:
	@echo -e "$(BLUE)ü¶Ä Building Rust platform engine...$(NC)"
	cd $(RUST_ENGINE) && $(CARGO) build $(RUST_BUILD_FLAGS)
	@echo -e "$(GREEN)‚úÖ Rust engine built$(NC)"

# Build Go fabric proxies
build-go:
	@echo -e "$(BLUE)üêπ Building Go fabric proxies...$(NC)"  
	cd $(GO_PROXIES) && $(GO) build $(GO_BUILD_FLAGS) -o fabric_proxy .
	@echo -e "$(GREEN)‚úÖ Go proxies built$(NC)"

# Setup Python agents
build-python: $(VENV)
	@echo -e "$(BLUE)üêç Setting up Python agents...$(NC)"
	$(VENV_BIN)/python -m py_compile $(CORE_DIR)/nexus_orchestrator.py
	$(VENV_BIN)/python -m py_compile $(PYTHON_AGENTS)/exwork_agent.py
	@echo -e "$(GREEN)‚úÖ Python agents ready$(NC)"

# Build React frontend
build-frontend: $(NODE_MODULES)
	@echo -e "$(BLUE)‚öõÔ∏è  Building React frontend...$(NC)"
	cd $(WEB_FRONTEND) && $(NPM) run build
	@echo -e "$(GREEN)‚úÖ Frontend built$(NC)"

# Run comprehensive tests
test: test-python test-go test-rust test-integration
	@echo -e "$(GREEN)‚úÖ All Trinity tests passed$(NC)"

# Test Python components
test-python: $(VENV)
	@echo -e "$(BLUE)üß™ Testing Python components...$(NC)"
	$(PYTEST) tests/ -v --tb=short

# Test Go components  
test-go:
	@echo -e "$(BLUE)üß™ Testing Go components...$(NC)"
	cd $(GO_PROXIES) && $(GO) test -v ./...

# Test Rust components
test-rust:
	@echo -e "$(BLUE)üß™ Testing Rust components...$(NC)"
	cd $(RUST_ENGINE) && $(CARGO) test

# Run integration tests  
test-integration: $(VENV)
	@echo -e "$(BLUE)üß™ Running Trinity integration tests...$(NC)"
	$(VENV_BIN)/python -m pytest tests/integration/ -v

# Health check for Trinity systems
health: $(VENV)
	@echo -e "$(BLUE)üè• Running Trinity health check...$(NC)"
	$(VENV_BIN)/python $(CLI_INTERFACE)/nexus_cli.py "check system health"

# Deploy LoL Nexus Compute Fabric
deploy: build
	@echo -e "$(BLUE)üö¢ Deploying LoL Nexus Compute Fabric...$(NC)"
	$(VENV_BIN)/python $(CLI_INTERFACE)/nexus_cli.py "deploy in production mode"
	@echo -e "$(GREEN)üåü LoL Nexus deployed successfully!$(NC)"

# Install global commands  
install: build
	@echo -e "$(BLUE)üîß Installing global commands...$(NC)"
	chmod +x $(INTERFACES_DIR)/global_commands/omnimesh
	ln -sf $(PWD)/$(INTERFACES_DIR)/global_commands/omnimesh /usr/local/bin/omnimesh || \
	    sudo ln -sf $(PWD)/$(INTERFACES_DIR)/global_commands/omnimesh /usr/local/bin/omnimesh
	ln -sf /usr/local/bin/omnimesh /usr/local/bin/omni || \
	    sudo ln -sf /usr/local/bin/omnimesh /usr/local/bin/omni  
	ln -sf /usr/local/bin/omnimesh /usr/local/bin/om || \
	    sudo ln -sf /usr/local/bin/omnimesh /usr/local/bin/om
	@echo -e "$(GREEN)‚úÖ Global commands installed: omnimesh, omni, om$(NC)"

# Generate codebase map using omnimapper
codebase-map: $(VENV)
	@echo -e "$(BLUE)üó∫Ô∏è  Generating Trinity codebase map...$(NC)"
	$(VENV_BIN)/python $(AUTOMATION_DIR)/utils/omnimapper.py . \
	    --output-file trinity_codebase_map.json \
	    --max-files 0
	@echo -e "$(GREEN)‚úÖ Codebase map generated: trinity_codebase_map.json$(NC)"

# Development server
dev: setup
	@echo -e "$(BLUE)üöÄ Starting Trinity development server...$(NC)"
	cd $(WEB_FRONTEND) && $(NPM) run dev &
	$(VENV_BIN)/python $(CORE_DIR)/nexus_orchestrator.py

# Clean build artifacts
clean:
	@echo -e "$(YELLOW)üßπ Cleaning Trinity build artifacts...$(NC)"
	rm -rf $(VENV)
	rm -rf $(NODE_MODULES)
	cd $(RUST_ENGINE) && $(CARGO) clean 2>/dev/null || true
	cd $(GO_PROXIES) && $(GO) clean 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	rm -f trinity_codebase_map.json
	@echo -e "$(GREEN)‚úÖ Cleanup complete$(NC)"

# Development tools
format: $(VENV)
	@echo -e "$(BLUE)üé® Formatting Trinity codebase...$(NC)"
	$(VENV_BIN)/black $(CORE_DIR)/ $(AUTOMATION_DIR)/
	cd $(GO_PROXIES) && $(GO) fmt ./...
	cd $(RUST_ENGINE) && $(CARGO) fmt
	cd $(WEB_FRONTEND) && $(NPM) run format

lint: $(VENV)
	@echo -e "$(BLUE)üîç Linting Trinity codebase...$(NC)"
	$(VENV_BIN)/flake8 $(CORE_DIR)/ $(AUTOMATION_DIR)/
	cd $(GO_PROXIES) && $(GO) vet ./...
	cd $(RUST_ENGINE) && $(CARGO) clippy
	cd $(WEB_FRONTEND) && $(NPM) run lint

# Security audit
security: $(VENV)
	@echo -e "$(BLUE)üîí Running Trinity security audit...$(NC)"
	$(VENV_BIN)/safety check
	cd $(GO_PROXIES) && $(GO) list -json -m all | nancy sleuth
	cd $(RUST_ENGINE) && $(CARGO) audit
	cd $(WEB_FRONTEND) && $(NPM) audit

# Performance benchmark
benchmark: $(VENV)
	@echo -e "$(BLUE)‚ö° Running Trinity performance benchmarks...$(NC)"
	$(VENV_BIN)/python -m pytest tests/benchmarks/ -v

# Documentation
docs: $(VENV)
	@echo -e "$(BLUE)üìö Generating Trinity documentation...$(NC)"
	$(VENV_BIN)/sphinx-build -b html docs/ docs/_build/

# Show help
help:
	$(call print_banner)
	@echo -e "$(CYAN)Available targets:$(NC)"
	@echo -e "  $(GREEN)all$(NC)           - Build entire Trinity Convergence system"
	@echo -e "  $(GREEN)setup$(NC)         - Setup development environment"
	@echo -e "  $(GREEN)build$(NC)         - Build all Trinity components"
	@echo -e "  $(GREEN)test$(NC)          - Run comprehensive test suite"
	@echo -e "  $(GREEN)health$(NC)        - Check Trinity system health"
	@echo -e "  $(GREEN)deploy$(NC)        - Deploy LoL Nexus Compute Fabric"
	@echo -e "  $(GREEN)install$(NC)       - Install global commands (omnimesh/omni/om)"
	@echo -e "  $(GREEN)codebase-map$(NC)  - Generate Trinity codebase map"
	@echo -e "  $(GREEN)dev$(NC)           - Start development server"
	@echo -e "  $(GREEN)clean$(NC)         - Clean build artifacts"
	@echo -e "  $(GREEN)format$(NC)        - Format codebase"
	@echo -e "  $(GREEN)lint$(NC)          - Lint codebase"
	@echo -e "  $(GREEN)security$(NC)      - Run security audit"
	@echo -e "  $(GREEN)benchmark$(NC)     - Run performance benchmarks"
	@echo -e "  $(GREEN)help$(NC)          - Show this help message"
	@echo
	@echo -e "$(CYAN)Trinity Architecture:$(NC)"
	@echo -e "  $(BLUE)Core Engine:$(NC)      PONGEX ExWork Agent v3.0"
	@echo -e "  $(BLUE)Interface Layer:$(NC)  omniterm Genesis Agent"
	@echo -e "  $(BLUE)Platform Layer:$(NC)   OMNIMESH Infrastructure"

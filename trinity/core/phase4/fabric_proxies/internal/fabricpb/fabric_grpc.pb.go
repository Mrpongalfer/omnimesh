// Copied from Phase 1 nexus-prime-core/proto/fabric.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: fabric.proto

package fabricpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FabricService_RegisterAgent_FullMethodName      = "/fabric.FabricService/RegisterAgent"
	FabricService_UpdateAgentStatus_FullMethodName  = "/fabric.FabricService/UpdateAgentStatus"
	FabricService_StreamFabricEvents_FullMethodName = "/fabric.FabricService/StreamFabricEvents"
	FabricService_SendFabricCommand_FullMethodName  = "/fabric.FabricService/SendFabricCommand"
)

// FabricServiceClient is the client API for FabricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Nexus Prime Fabric Management Service
type FabricServiceClient interface {
	// Compute Node/Proxy registers itself with Nexus Prime
	RegisterAgent(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error)
	// Compute Node/Proxy sends status updates and telemetry
	UpdateAgentStatus(ctx context.Context, in *AgentStatusUpdate, opts ...grpc.CallOption) (*CommandResponse, error)
	// UI/Mobile app subscribes to real-time fabric events
	StreamFabricEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FabricEvent], error)
	// Architect issues commands to the fabric (e.g., via UI)
	SendFabricCommand(ctx context.Context, in *FabricCommand, opts ...grpc.CallOption) (*CommandResponse, error)
}

type fabricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFabricServiceClient(cc grpc.ClientConnInterface) FabricServiceClient {
	return &fabricServiceClient{cc}
}

func (c *fabricServiceClient) RegisterAgent(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentRegistrationResponse)
	err := c.cc.Invoke(ctx, FabricService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricServiceClient) UpdateAgentStatus(ctx context.Context, in *AgentStatusUpdate, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, FabricService_UpdateAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricServiceClient) StreamFabricEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FabricEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FabricService_ServiceDesc.Streams[0], FabricService_StreamFabricEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, FabricEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FabricService_StreamFabricEventsClient = grpc.ServerStreamingClient[FabricEvent]

func (c *fabricServiceClient) SendFabricCommand(ctx context.Context, in *FabricCommand, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, FabricService_SendFabricCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabricServiceServer is the server API for FabricService service.
// All implementations must embed UnimplementedFabricServiceServer
// for forward compatibility.
//
// Nexus Prime Fabric Management Service
type FabricServiceServer interface {
	// Compute Node/Proxy registers itself with Nexus Prime
	RegisterAgent(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error)
	// Compute Node/Proxy sends status updates and telemetry
	UpdateAgentStatus(context.Context, *AgentStatusUpdate) (*CommandResponse, error)
	// UI/Mobile app subscribes to real-time fabric events
	StreamFabricEvents(*emptypb.Empty, grpc.ServerStreamingServer[FabricEvent]) error
	// Architect issues commands to the fabric (e.g., via UI)
	SendFabricCommand(context.Context, *FabricCommand) (*CommandResponse, error)
	mustEmbedUnimplementedFabricServiceServer()
}

// UnimplementedFabricServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFabricServiceServer struct{}

func (UnimplementedFabricServiceServer) RegisterAgent(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedFabricServiceServer) UpdateAgentStatus(context.Context, *AgentStatusUpdate) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatus not implemented")
}
func (UnimplementedFabricServiceServer) StreamFabricEvents(*emptypb.Empty, grpc.ServerStreamingServer[FabricEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFabricEvents not implemented")
}
func (UnimplementedFabricServiceServer) SendFabricCommand(context.Context, *FabricCommand) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFabricCommand not implemented")
}
func (UnimplementedFabricServiceServer) mustEmbedUnimplementedFabricServiceServer() {}
func (UnimplementedFabricServiceServer) testEmbeddedByValue()                       {}

// UnsafeFabricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FabricServiceServer will
// result in compilation errors.
type UnsafeFabricServiceServer interface {
	mustEmbedUnimplementedFabricServiceServer()
}

func RegisterFabricServiceServer(s grpc.ServiceRegistrar, srv FabricServiceServer) {
	// If the following call pancis, it indicates UnimplementedFabricServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FabricService_ServiceDesc, srv)
}

func _FabricService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FabricService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricServiceServer).RegisterAgent(ctx, req.(*AgentRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricService_UpdateAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricServiceServer).UpdateAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FabricService_UpdateAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricServiceServer).UpdateAgentStatus(ctx, req.(*AgentStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricService_StreamFabricEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FabricServiceServer).StreamFabricEvents(m, &grpc.GenericServerStream[emptypb.Empty, FabricEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FabricService_StreamFabricEventsServer = grpc.ServerStreamingServer[FabricEvent]

func _FabricService_SendFabricCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FabricCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricServiceServer).SendFabricCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FabricService_SendFabricCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricServiceServer).SendFabricCommand(ctx, req.(*FabricCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// FabricService_ServiceDesc is the grpc.ServiceDesc for FabricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FabricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fabric.FabricService",
	HandlerType: (*FabricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _FabricService_RegisterAgent_Handler,
		},
		{
			MethodName: "UpdateAgentStatus",
			Handler:    _FabricService_UpdateAgentStatus_Handler,
		},
		{
			MethodName: "SendFabricCommand",
			Handler:    _FabricService_SendFabricCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFabricEvents",
			Handler:       _FabricService_StreamFabricEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fabric.proto",
}

const (
	NodeProxyService_DeployAgent_FullMethodName = "/fabric.NodeProxyService/DeployAgent"
	NodeProxyService_StopAgent_FullMethodName   = "/fabric.NodeProxyService/StopAgent"
)

// NodeProxyServiceClient is the client API for NodeProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for the node proxies, called by the Nexus Prime Core
type NodeProxyServiceClient interface {
	// Instructs a node to deploy a new AI agent
	DeployAgent(ctx context.Context, in *DeployAgentRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	// Instructs a node to stop a running AI agent
	StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type nodeProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeProxyServiceClient(cc grpc.ClientConnInterface) NodeProxyServiceClient {
	return &nodeProxyServiceClient{cc}
}

func (c *nodeProxyServiceClient) DeployAgent(ctx context.Context, in *DeployAgentRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, NodeProxyService_DeployAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeProxyServiceClient) StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, NodeProxyService_StopAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeProxyServiceServer is the server API for NodeProxyService service.
// All implementations must embed UnimplementedNodeProxyServiceServer
// for forward compatibility.
//
// Service definition for the node proxies, called by the Nexus Prime Core
type NodeProxyServiceServer interface {
	// Instructs a node to deploy a new AI agent
	DeployAgent(context.Context, *DeployAgentRequest) (*CommandResponse, error)
	// Instructs a node to stop a running AI agent
	StopAgent(context.Context, *StopAgentRequest) (*CommandResponse, error)
	mustEmbedUnimplementedNodeProxyServiceServer()
}

// UnimplementedNodeProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeProxyServiceServer struct{}

func (UnimplementedNodeProxyServiceServer) DeployAgent(context.Context, *DeployAgentRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployAgent not implemented")
}
func (UnimplementedNodeProxyServiceServer) StopAgent(context.Context, *StopAgentRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAgent not implemented")
}
func (UnimplementedNodeProxyServiceServer) mustEmbedUnimplementedNodeProxyServiceServer() {}
func (UnimplementedNodeProxyServiceServer) testEmbeddedByValue()                          {}

// UnsafeNodeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeProxyServiceServer will
// result in compilation errors.
type UnsafeNodeProxyServiceServer interface {
	mustEmbedUnimplementedNodeProxyServiceServer()
}

func RegisterNodeProxyServiceServer(s grpc.ServiceRegistrar, srv NodeProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeProxyService_ServiceDesc, srv)
}

func _NodeProxyService_DeployAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeProxyServiceServer).DeployAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeProxyService_DeployAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeProxyServiceServer).DeployAgent(ctx, req.(*DeployAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeProxyService_StopAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeProxyServiceServer).StopAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeProxyService_StopAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeProxyServiceServer).StopAgent(ctx, req.(*StopAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeProxyService_ServiceDesc is the grpc.ServiceDesc for NodeProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fabric.NodeProxyService",
	HandlerType: (*NodeProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployAgent",
			Handler:    _NodeProxyService_DeployAgent_Handler,
		},
		{
			MethodName: "StopAgent",
			Handler:    _NodeProxyService_StopAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fabric.proto",
}

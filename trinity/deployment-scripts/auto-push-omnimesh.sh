#!/bin/bash

# ðŸš€ OMNIMESH Auto-Push Script
# Comprehensive git operations for the entire OMNIMESH ecosystem
# Handles main repo, submodules, and all components

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[OMNIMESH-PUSH]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

echo "ðŸŒŠ OMNIMESH Comprehensive Auto-Push Utility"
echo "ðŸ“‚ Working directory: $(pwd)"

# Ensure we're in the OMNIMESH root
if [[ ! -f "install-omnimesh.sh" ]]; then
    print_error "Must be run from OMNIMESH root directory"
    exit 1
fi

# Function to push submodule
push_submodule() {
    local submodule_path="$1"
    local submodule_name="$2"
    
    if [[ -d "$submodule_path" ]]; then
        print_status "Processing $submodule_name submodule..."
        cd "$submodule_path"
        
        # Check if it's a git repo and has changes
        if git rev-parse --git-dir > /dev/null 2>&1; then
            if ! git diff-index --quiet HEAD -- 2>/dev/null; then
                print_info "Changes detected in $submodule_name"
                git add -A
                timestamp=$(date '+%Y-%m-%d %H:%M:%S')
                git commit -m "ðŸ”§ $submodule_name auto-update: ${timestamp}" || true
                
                # Push if remote exists
                if git remote get-url origin > /dev/null 2>&1; then
                    current_branch=$(git branch --show-current)
                    print_info "Pushing $submodule_name to $current_branch..."
                    git push origin "$current_branch" || print_error "Failed to push $submodule_name"
                else
                    print_info "$submodule_name: No remote configured"
                fi
            else
                print_info "$submodule_name: No changes"
            fi
        else
            print_info "$submodule_name: Not a git repository"
        fi
        
        cd - > /dev/null
    fi
}

# 1. First push submodules
print_status "Step 1: Processing submodules..."
push_submodule "BACKEND" "Backend"
push_submodule "FRONTEND" "Frontend"

# 2. Process main repository
print_status "Step 2: Processing main repository..."

# Check if main repo has changes (including submodule updates)
if git diff-index --quiet HEAD -- 2>/dev/null && git diff-index --quiet --cached HEAD -- 2>/dev/null; then
    print_status "No changes in main repository"
else
    print_status "Changes detected in main repository"
    
    # Stage everything
    print_info "Staging all changes..."
    git add -A
    
    # Update submodule references
    if [[ -d "BACKEND/.git" ]]; then
        git add BACKEND
    fi
    if [[ -d "FRONTEND/.git" ]]; then
        git add FRONTEND
    fi
    
    # Create comprehensive commit message
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Check what changed
    changes=""
    if git diff --cached --name-only | grep -q "BACKEND"; then
        changes="$changes backend,"
    fi
    if git diff --cached --name-only | grep -q "FRONTEND"; then
        changes="$changes frontend,"
    fi
    if git diff --cached --name-only | grep -qv "BACKEND\|FRONTEND"; then
        changes="$changes main,"
    fi
    changes=${changes%,}  # Remove trailing comma
    
    commit_msg="ðŸŒŠ OMNIMESH comprehensive update ($changes): ${timestamp}

ï¿½ Auto-generated commit includes:
$(git diff --cached --name-status | head -20)
$(if [[ $(git diff --cached --name-status | wc -l) -gt 20 ]]; then echo "... and $(( $(git diff --cached --name-status | wc -l) - 20 )) more files"; fi)

ðŸš€ Generated by: omni push"
    
    print_info "Committing with comprehensive message..."
    git commit -m "${commit_msg}"
fi

# 3. Push main repository
if git remote get-url origin > /dev/null 2>&1; then
    current_branch=$(git branch --show-current)
    print_status "Pushing main repository to $current_branch..."
    git push origin "$current_branch"
    print_status "âœ… Main repository pushed successfully"
else
    print_error "No remote configured for main repository"
fi

print_status "ðŸŽ‰ Comprehensive push operation completed!"
print_info "Repository: $(git config --get remote.origin.url 2>/dev/null || echo 'No remote configured')"
print_info "Branch: $(git branch --show-current)"
print_info "Latest commit: $(git log -1 --oneline)"

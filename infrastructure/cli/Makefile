# omni-cli Makefile

.PHONY: build clean test install dev help

# Build configuration
BINARY_NAME=omni-cli
VERSION=$(shell git describe --tags --always --dirty)
LDFLAGS=-ldflags "-X main.Version=$(VERSION)"
BUILD_DIR=build

# Default target
all: build

# Build the binary
build:
	@echo "üî® Building $(BINARY_NAME)..."
	@mkdir -p $(BUILD_DIR)
	go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) .
	@echo "‚úÖ Build complete: $(BUILD_DIR)/$(BINARY_NAME)"

# Build for multiple platforms
build-all:
	@echo "üî® Building for multiple platforms..."
	@mkdir -p $(BUILD_DIR)
	
	# Linux amd64
	GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-linux-amd64 .
	
	# Linux arm64
	GOOS=linux GOARCH=arm64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-linux-arm64 .
	
	# macOS amd64
	GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-amd64 .
	
	# macOS arm64
	GOOS=darwin GOARCH=arm64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-arm64 .
	
	# Windows amd64
	GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe .
	
	@echo "‚úÖ Multi-platform build complete"

# Run tests
test:
	@echo "üß™ Running tests..."
	go test -v ./...

# Run tests with coverage
test-coverage:
	@echo "üß™ Running tests with coverage..."
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "üìä Coverage report generated: coverage.html"

# Install dependencies
deps:
	@echo "üì¶ Installing dependencies..."
	go mod tidy
	go mod download

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	rm -f coverage.out coverage.html

# Install binary to system
install: build
	@echo "üì¶ Installing $(BINARY_NAME)..."
	sudo mv $(BUILD_DIR)/$(BINARY_NAME) /usr/local/bin/
	@echo "‚úÖ $(BINARY_NAME) installed to /usr/local/bin/"

# Development mode with auto-reload
dev:
	@echo "üîß Starting development mode..."
	go run . --help

# Format code
fmt:
	@echo "üé® Formatting code..."
	go fmt ./...

# Lint code
lint:
	@echo "üîç Linting code..."
	golangci-lint run

# Generate documentation
docs:
	@echo "üìö Generating documentation..."
	go run . --help > docs/CLI_HELP.md

# Create release
release: clean build-all
	@echo "üöÄ Creating release..."
	@mkdir -p release
	tar -czf release/$(BINARY_NAME)-$(VERSION)-linux-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-linux-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-linux-arm64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-linux-arm64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-arm64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-arm64
	zip -j release/$(BINARY_NAME)-$(VERSION)-windows-amd64.zip $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe
	@echo "‚úÖ Release packages created in release/"

# Quick test of CLI
smoke-test: build
	@echo "üîç Running smoke test..."
	./$(BUILD_DIR)/$(BINARY_NAME) --version
	./$(BUILD_DIR)/$(BINARY_NAME) --help
	@echo "‚úÖ Smoke test passed"

# Help target
help:
	@echo "Available targets:"
	@echo "  build          - Build the binary"
	@echo "  build-all      - Build for multiple platforms"
	@echo "  test           - Run tests"
	@echo "  test-coverage  - Run tests with coverage"
	@echo "  deps           - Install dependencies"
	@echo "  clean          - Clean build artifacts"
	@echo "  install        - Install binary to system"
	@echo "  dev            - Development mode"
	@echo "  fmt            - Format code"
	@echo "  lint           - Lint code"
	@echo "  docs           - Generate documentation"
	@echo "  release        - Create release packages"
	@echo "  smoke-test     - Quick test of CLI"
	@echo "  help           - Show this help"

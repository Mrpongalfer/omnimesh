#!/usr/bin/env bash
# OMNIMESH Global Command - Universal Entry Point
# Usage: omnimesh [command] [options]

# Get the script directory (where OMNIMESH is installed)
# If this is a symlink, follow it to the actual location
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [ -L "$SCRIPT_PATH" ]; do
    SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" && pwd)"
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
    [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
OMNIMESH_ROOT="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
VENV_PATH="$OMNIMESH_ROOT/venv"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[OMNIMESH]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to activate virtual environment
activate_venv() {
    if [[ -d "$VENV_PATH" ]]; then
        source "$VENV_PATH/bin/activate"
        return 0
    else
        print_error "Virtual environment not found. Run 'omnimesh setup' first."
        return 1
    fi
}

# Function to show help
show_help() {
    cat << EOF
🌊 OMNIMESH - Universal Command Interface

USAGE:
    omnimesh [COMMAND] [OPTIONS]

COMMANDS:
    launch, run          Launch the main interface
    tui                  Launch Textual TUI interface
    cli                  Launch CLI interface
    c2, command          Launch Command & Control Center
    status               Show system status
    test                 Run comprehensive tests
    build                Build all components
    setup                Run setup and installation
    update               Update from GitHub
    push                 Push changes to GitHub (comprehensive)
    save [message]       Quick save and push (with optional message)
    commit "message"     Quick commit with message
    sync                 Full sync: pull + push
    help, -h, --help     Show this help message

EXAMPLES:
    omnimesh             # Launch main interface
    omnimesh tui         # Launch TUI interface
    omnimesh c2          # Launch Command & Control Center
    omnimesh test        # Run all tests
    omnimesh build       # Build all components
    omnimesh status      # Show system status
    
    # Git operations:
    omnimesh push        # Push all changes (main + submodules)
    omnimesh save        # Quick save and push
    omnimesh save "fix"  # Save with message and push
    omnimesh commit "msg" # Just commit, don't push
    omnimesh sync        # Pull updates then push changes

DEVELOPMENT:
    omnimesh frontend    # Work with frontend
    omnimesh backend     # Work with backend
    omnimesh logs        # View system logs

For more information, visit: https://github.com/Mrpongalfer/omnimesh
EOF
}

# Function to show status
show_status() {
    print_status "OMNIMESH System Status"
    echo "===================="
    echo "📂 Root Directory: $OMNIMESH_ROOT"
    echo "🐍 Python Environment: $VENV_PATH"
    
    if [[ -d "$VENV_PATH" ]]; then
        echo "✅ Virtual Environment: Active"
    else
        echo "❌ Virtual Environment: Not Found"
    fi
    
    if [[ -f "$OMNIMESH_ROOT/install-omnimesh.sh" ]]; then
        echo "✅ Installer: Available"
    else
        echo "❌ Installer: Missing"
    fi
    
    if [[ -f "$OMNIMESH_ROOT/omni-launcher.py" ]]; then
        echo "✅ Launcher: Available"
    else
        echo "❌ Launcher: Missing"
    fi
    
    echo "===================="
}

# Main command handler
main() {
    cd "$OMNIMESH_ROOT"
    
    case "${1:-}" in
        ""|"launch"|"run")
            print_status "Launching OMNIMESH..."
            if activate_venv; then
                python omni-launcher.py
            fi
            ;;
        "tui")
            print_status "Launching TUI Interface..."
            if activate_venv; then
                python omni-launcher.py --tui
            fi
            ;;
        "cli")
            print_status "Launching CLI Interface..."
            if activate_venv; then
                python omni-launcher.py --cli
            fi
            ;;
        "c2"|"command")
            print_status "Launching Command & Control Center..."
            if activate_venv; then
                python omni-c2-center.py
            fi
            ;;
        "status")
            show_status
            ;;
        "test")
            print_status "Running comprehensive tests..."
            if activate_venv; then
                python test-omni-tui.py
            fi
            ;;
        "build")
            print_status "Building all components..."
            if activate_venv; then
                python omni-launcher.py --build
            fi
            ;;
        "setup")
            print_status "Running setup and installation..."
            ./install-omnimesh.sh
            ;;
        "update")
            print_status "Updating from GitHub..."
            git pull origin main
            git submodule update --recursive --remote
            ;;
        "push")
            print_status "Pushing to GitHub..."
            ./scripts/auto-push-omnimesh.sh
            ;;
        "push-all"|"pushall")
            print_status "Comprehensive push: main + submodules + everything..."
            ./scripts/auto-push-omnimesh.sh
            ;;
        "commit")
            print_status "Quick commit with message..."
            if [[ -n "${2:-}" ]]; then
                git add -A
                git commit -m "$2"
                print_info "Committed with message: $2"
            else
                print_error "Usage: omni commit \"Your commit message\""
            fi
            ;;
        "save")
            print_status "Quick save and push..."
            if [[ -n "${2:-}" ]]; then
                git add -A
                git commit -m "$2"
                ./scripts/auto-push-omnimesh.sh
            else
                timestamp=$(date '+%Y-%m-%d %H:%M:%S')
                git add -A
                git commit -m "🌊 Quick save: ${timestamp}"
                ./scripts/auto-push-omnimesh.sh
            fi
            ;;
        "sync")
            print_status "Full sync: pull + push..."
            git pull origin main
            git submodule update --recursive --remote
            ./scripts/auto-push-omnimesh.sh
            ;;
        "frontend")
            print_status "Entering frontend development..."
            cd FRONTEND/ui-solidjs
            echo "Frontend commands available:"
            echo "  npm run dev    - Start development server"
            echo "  npm run build  - Build for production"
            echo "  npm run preview - Preview build"
            bash
            ;;
        "backend")
            print_status "Entering backend development..."
            cd BACKEND
            echo "Backend commands available:"
            echo "  ./build.sh     - Build all components"
            echo "  cargo build    - Build Rust core"
            echo "  cargo test     - Run tests"
            bash
            ;;
        "logs")
            print_status "Viewing system logs..."
            if [[ -f "install.log" ]]; then
                tail -f install.log
            else
                print_error "No logs found"
            fi
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo "Use 'omnimesh help' for available commands"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"

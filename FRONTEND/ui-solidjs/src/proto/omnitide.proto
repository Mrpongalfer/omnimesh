// Protobuf schema definitions for Omnitide Control Panel
// This file contains the message definitions for real-time communication

syntax = "proto3";

package omnitide.control;

// Common data types
message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message Vector2D {
  double x = 1;
  double y = 2;
}

message Vector3D {
  double x = 1;
  double y = 2;
  double z = 3;
}

// Node-related messages
message NodeResources {
  double cpu = 1;
  double memory = 2;
  double storage = 3;
  double network = 4;
}

message NodeMetadata {
  string name = 1;
  string lastSeen = 2;
  repeated string tags = 3;
  map<string, string> properties = 4;
}

message Node {
  string id = 1;
  Vector2D position = 2;
  double health = 3;
  double activity = 4;
  NodeType type = 5;
  NodeStatus status = 6;
  NodeResources resources = 7;
  NodeMetadata metadata = 8;
  repeated string connections = 9;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  NODE_TYPE_COMPUTE = 1;
  NODE_TYPE_STORAGE = 2;
  NODE_TYPE_NETWORK = 3;
  NODE_TYPE_COORDINATOR = 4;
}

enum NodeStatus {
  NODE_STATUS_UNSPECIFIED = 0;
  NODE_STATUS_ONLINE = 1;
  NODE_STATUS_OFFLINE = 2;
  NODE_STATUS_MAINTENANCE = 3;
  NODE_STATUS_ERROR = 4;
}

// Agent-related messages
message Agent {
  string id = 1;
  int32 fromNode = 2;
  int32 toNode = 3;
  double progress = 4;
  AgentType type = 5;
  AgentStatus status = 6;
  string currentTask = 7;
  Timestamp startTime = 8;
  Timestamp estimatedCompletion = 9;
  map<string, string> configuration = 10;
}

enum AgentType {
  AGENT_TYPE_UNSPECIFIED = 0;
  AGENT_TYPE_MONITOR = 1;
  AGENT_TYPE_PROCESSOR = 2;
  AGENT_TYPE_ANALYZER = 3;
  AGENT_TYPE_COORDINATOR = 4;
}

enum AgentStatus {
  AGENT_STATUS_UNSPECIFIED = 0;
  AGENT_STATUS_ACTIVE = 1;
  AGENT_STATUS_IDLE = 2;
  AGENT_STATUS_DEPLOYING = 3;
  AGENT_STATUS_STOPPING = 4;
  AGENT_STATUS_ERROR = 5;
}

// Flow and connectivity
message Flow {
  string id = 1;
  int32 fromNode = 2;
  int32 toNode = 3;
  double volume = 4;
  double bandwidth = 5;
  double latency = 6;
  FlowStatus status = 7;
  string protocol = 8;
}

enum FlowStatus {
  FLOW_STATUS_UNSPECIFIED = 0;
  FLOW_STATUS_ACTIVE = 1;
  FLOW_STATUS_CONGESTED = 2;
  FLOW_STATUS_ERROR = 3;
  FLOW_STATUS_INACTIVE = 4;
}

// Anomaly detection
message Anomaly {
  string id = 1;
  int32 nodeIndex = 2;
  AnomalyType type = 3;
  AnomalySeverity severity = 4;
  string description = 5;
  double confidence = 6;
  Timestamp detectedAt = 7;
  bool acknowledged = 8;
  map<string, string> metadata = 9;
}

enum AnomalyType {
  ANOMALY_TYPE_UNSPECIFIED = 0;
  ANOMALY_TYPE_PERFORMANCE = 1;
  ANOMALY_TYPE_SECURITY = 2;
  ANOMALY_TYPE_CONNECTIVITY = 3;
  ANOMALY_TYPE_RESOURCE = 4;
}

enum AnomalySeverity {
  ANOMALY_SEVERITY_UNSPECIFIED = 0;
  ANOMALY_SEVERITY_LOW = 1;
  ANOMALY_SEVERITY_MEDIUM = 2;
  ANOMALY_SEVERITY_HIGH = 3;
  ANOMALY_SEVERITY_CRITICAL = 4;
}

// System metrics
message SystemMetrics {
  Timestamp timestamp = 1;
  double overallHealth = 2;
  double networkUtilization = 3;
  int32 activeConnections = 4;
  double throughput = 5;
  double averageLatency = 6;
  int32 errorCount = 7;
  map<string, double> customMetrics = 8;
}

// Real-time updates
message NetworkState {
  repeated Node nodes = 1;
  repeated Agent agents = 2;
  repeated Flow flows = 3;
  repeated Anomaly anomalies = 4;
  SystemMetrics metrics = 5;
  Timestamp lastUpdated = 6;
}

// Commands and control
message Command {
  string id = 1;
  CommandType type = 2;
  string target = 3;
  map<string, string> parameters = 4;
  Timestamp issuedAt = 5;
  string issuedBy = 6;
}

enum CommandType {
  COMMAND_TYPE_UNSPECIFIED = 0;
  COMMAND_TYPE_DEPLOY_AGENT = 1;
  COMMAND_TYPE_STOP_AGENT = 2;
  COMMAND_TYPE_REPAIR_NODE = 3;
  COMMAND_TYPE_RESTART_NODE = 4;
  COMMAND_TYPE_SCAN_NETWORK = 5;
  COMMAND_TYPE_ACKNOWLEDGE_ANOMALY = 6;
  COMMAND_TYPE_OPTIMIZE_LAYOUT = 7;
}

message CommandResponse {
  string commandId = 1;
  CommandStatus status = 2;
  string message = 3;
  map<string, string> results = 4;
  Timestamp completedAt = 5;
}

enum CommandStatus {
  COMMAND_STATUS_UNSPECIFIED = 0;
  COMMAND_STATUS_PENDING = 1;
  COMMAND_STATUS_EXECUTING = 2;
  COMMAND_STATUS_COMPLETED = 3;
  COMMAND_STATUS_FAILED = 4;
  COMMAND_STATUS_CANCELLED = 5;
}

// Notifications and events
message Notification {
  string id = 1;
  NotificationType type = 2;
  NotificationSeverity severity = 3;
  string title = 4;
  string message = 5;
  Timestamp timestamp = 6;
  bool acknowledged = 7;
  map<string, string> metadata = 8;
}

enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  NOTIFICATION_TYPE_INFO = 1;
  NOTIFICATION_TYPE_WARNING = 2;
  NOTIFICATION_TYPE_ERROR = 3;
  NOTIFICATION_TYPE_SUCCESS = 4;
  NOTIFICATION_TYPE_ALERT = 5;
}

enum NotificationSeverity {
  NOTIFICATION_SEVERITY_UNSPECIFIED = 0;
  NOTIFICATION_SEVERITY_LOW = 1;
  NOTIFICATION_SEVERITY_NORMAL = 2;
  NOTIFICATION_SEVERITY_HIGH = 3;
  NOTIFICATION_SEVERITY_CRITICAL = 4;
}

// WebSocket/WebTransport message envelope
message Message {
  string messageId = 1;
  MessageType type = 2;
  Timestamp timestamp = 3;
  
  oneof payload {
    NetworkState networkState = 10;
    Command command = 11;
    CommandResponse commandResponse = 12;
    Notification notification = 13;
    SubscriptionRequest subscription = 14;
    SubscriptionResponse subscriptionResponse = 15;
    HeartbeatRequest heartbeat = 16;
    HeartbeatResponse heartbeatResponse = 17;
  }
}

enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_NETWORK_STATE = 1;
  MESSAGE_TYPE_COMMAND = 2;
  MESSAGE_TYPE_COMMAND_RESPONSE = 3;
  MESSAGE_TYPE_NOTIFICATION = 4;
  MESSAGE_TYPE_SUBSCRIPTION_REQUEST = 5;
  MESSAGE_TYPE_SUBSCRIPTION_RESPONSE = 6;
  MESSAGE_TYPE_HEARTBEAT_REQUEST = 7;
  MESSAGE_TYPE_HEARTBEAT_RESPONSE = 8;
}

// Subscription management
message SubscriptionRequest {
  string subscriptionId = 1;
  SubscriptionAction action = 2;
  repeated SubscriptionTopic topics = 3;
  map<string, string> filters = 4;
}

enum SubscriptionAction {
  SUBSCRIPTION_ACTION_UNSPECIFIED = 0;
  SUBSCRIPTION_ACTION_SUBSCRIBE = 1;
  SUBSCRIPTION_ACTION_UNSUBSCRIBE = 2;
  SUBSCRIPTION_ACTION_MODIFY = 3;
}

enum SubscriptionTopic {
  SUBSCRIPTION_TOPIC_UNSPECIFIED = 0;
  SUBSCRIPTION_TOPIC_NETWORK_STATE = 1;
  SUBSCRIPTION_TOPIC_ANOMALIES = 2;
  SUBSCRIPTION_TOPIC_METRICS = 3;
  SUBSCRIPTION_TOPIC_NOTIFICATIONS = 4;
  SUBSCRIPTION_TOPIC_COMMANDS = 5;
}

message SubscriptionResponse {
  string subscriptionId = 1;
  SubscriptionStatus status = 2;
  string message = 3;
}

enum SubscriptionStatus {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
  SUBSCRIPTION_STATUS_ACTIVE = 1;
  SUBSCRIPTION_STATUS_INACTIVE = 2;
  SUBSCRIPTION_STATUS_ERROR = 3;
}

// Heartbeat for connection monitoring
message HeartbeatRequest {
  Timestamp clientTime = 1;
  string clientId = 2;
}

message HeartbeatResponse {
  Timestamp serverTime = 1;
  Timestamp clientTime = 2;
  double latency = 3;
  string serverId = 4;
}

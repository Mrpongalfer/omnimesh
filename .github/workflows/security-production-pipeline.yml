name: 'OmniMesh Security & Production Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily security scans

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  RUST_VERSION: 'stable'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better security scanning

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd FRONTEND/ui-solidjs
          npm ci --audit-level=moderate

      - name: Run comprehensive security audit
        run: |
          chmod +x ./security-audit-complete.sh
          ./security-audit-complete.sh

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-audit-results/
          retention-days: 30

  dependency-security:
    name: 'Dependency Security'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk security scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          cd FRONTEND/ui-solidjs
          snyk test --severity-threshold=high --json > snyk-report.json || true
          snyk monitor || true

      - name: Run npm audit
        run: |
          cd FRONTEND/ui-solidjs
          npm audit --audit-level=moderate --json > npm-audit-report.json || true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-reports
          path: |
            FRONTEND/ui-solidjs/snyk-report.json
            FRONTEND/ui-solidjs/npm-audit-report.json

  static-analysis:
    name: 'Static Analysis'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd FRONTEND/ui-solidjs
          npm ci

      - name: Run ESLint security scan
        run: |
          cd FRONTEND/ui-solidjs
          npm run lint:security || true

      - name: Run TypeScript security analysis
        run: |
          cd FRONTEND/ui-solidjs
          npm run security:static || true

      - name: Run Semgrep security scan
        run: |
          python -m pip install semgrep
          semgrep --config=auto FRONTEND/ui-solidjs/src/ --json --output=semgrep-report.json || true

      - name: Upload static analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            semgrep-report.json
            FRONTEND/ui-solidjs/reports/

  container-security:
    name: 'Container Security'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          cd FRONTEND/ui-solidjs
          docker build -t omnimesh/ui-test:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'omnimesh/ui-test:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  security-tests:
    name: 'Security Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd FRONTEND/ui-solidjs
          npm ci

      - name: Install Playwright browsers
        run: |
          cd FRONTEND/ui-solidjs
          npx playwright install --with-deps

      - name: Run security tests
        run: |
          cd FRONTEND/ui-solidjs
          npm run test:security

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            FRONTEND/ui-solidjs/test-results/
            FRONTEND/ui-solidjs/playwright-report/

  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd FRONTEND/ui-solidjs
          npm ci

      - name: Build production bundle
        run: |
          cd FRONTEND/ui-solidjs
          npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          cd FRONTEND/ui-solidjs
          lhci autorun --upload.target=temporary-public-storage

      - name: Run bundle analysis
        run: |
          cd FRONTEND/ui-solidjs
          npm run security:bundle-analyze

  infrastructure-security:
    name: 'Infrastructure Security'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install security tools
        run: |
          go install github.com/securecodewarrior/github-action-add-sarif@latest
          go install github.com/aquasecurity/trivy/cmd/trivy@latest

      - name: Run infrastructure security scan
        run: |
          cd scripts
          chmod +x pre-deployment-security-check.sh
          ./pre-deployment-security-check.sh

      - name: Validate Kubernetes manifests
        run: |
          kubectl --dry-run=client --validate=true apply -f kubernetes/ || true

  backend-security:
    name: 'Backend Security'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Rust security audit
        run: |
          cargo install cargo-audit
          cd BACKEND/nexus-prime-core
          cargo audit --json > cargo-audit-report.json || true

      - name: Run Go security scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          cd BACKEND/go-node-proxies
          govulncheck ./... || true

      - name: Upload backend security reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-reports
          path: |
            BACKEND/nexus-prime-core/cargo-audit-report.json
            BACKEND/go-node-proxies/govulncheck-report.json

  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-security, static-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd FRONTEND/ui-solidjs
          npm ci

      - name: Run tests
        run: |
          cd FRONTEND/ui-solidjs
          npm run test:unit
          npm run test:integration

      - name: Build production bundle
        run: |
          cd FRONTEND/ui-solidjs
          npm run build

      - name: Validate build security
        run: |
          cd FRONTEND/ui-solidjs
          npm run security:pre-deploy

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-tests, performance-tests, infrastructure-security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run pre-deployment security check
        run: |
          chmod +x scripts/pre-deployment-security-check.sh
          scripts/pre-deployment-security-check.sh

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment verification..."
          # Add your post-deployment tests here

  security-monitoring:
    name: 'Security Monitoring'
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          echo "Setting up security monitoring..."
          # Add your security monitoring setup here

      - name: Create security report
        run: |
          echo "Creating comprehensive security report..."
          # Aggregate all security scan results

      - name: Notify security team
        if: failure()
        run: |
          echo "Notifying security team of pipeline failures..."
          # Add notification logic here

name: 🚀 Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 📋 Generate changelog
        run: |
          git log $(git describe --tags --abbrev=0 HEAD~1)..HEAD --pretty=format:"- %s" > CHANGELOG.txt

      - name: 📦 Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: 🌊 OmniTide ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.txt
          draft: false
          prerelease: false

  build-artifacts:
    name: 🔨 Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            rust_target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust_target: x86_64-pc-windows-msvc

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: 🔧 Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: 🔧 Install protobuf compiler
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y protobuf-compiler
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install protobuf
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install protoc
          fi
        shell: bash

      - name: 🔨 Build Rust binary
        run: |
          cd nexus-prime-core
          cargo build --release --target ${{ matrix.rust_target }}

      - name: 🔨 Build Go binary
        run: |
          cd go-node-proxies
          if [ "$RUNNER_OS" == "Windows" ]; then
            GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o gcnp.exe .
          else
            case "${{ matrix.target }}" in
              x86_64-unknown-linux-gnu)
                GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o gcnp .
                ;;
              aarch64-unknown-linux-gnu)
                GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o gcnp .
                ;;
              x86_64-apple-darwin)
                GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o gcnp .
                ;;
              aarch64-apple-darwin)
                GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o gcnp .
                ;;
            esac
          fi
        shell: bash

      - name: 📦 Package artifacts
        run: |
          mkdir -p release
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp nexus-prime-core/target/${{ matrix.rust_target }}/release/nexus-prime-core.exe release/
            cp go-node-proxies/gcnp.exe release/
            7z a release/omnitide-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip release/*
          else
            cp nexus-prime-core/target/${{ matrix.rust_target }}/release/nexus-prime-core release/
            cp go-node-proxies/gcnp release/
            tar -czf release/omnitide-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz -C release .
          fi
        shell: bash

      - name: 📤 Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/omnitide-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: omnitide-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream

  build-containers:
    name: 🐳 Build & Push Containers
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        component:
          - nexus-prime-core
          - go-node-proxies
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-containers]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☸️ Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: 🚀 Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/nexus-prime-core -n omnitide-staging
          kubectl rollout status deployment/go-node-proxies -n omnitide-staging

      - name: 🔍 Verify deployment
        run: |
          kubectl get pods -n omnitide-staging
          kubectl get services -n omnitide-staging

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-containers, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☸️ Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: 🚀 Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/production/
          kubectl rollout status deployment/nexus-prime-core -n omnitide-production
          kubectl rollout status deployment/go-node-proxies -n omnitide-production

      - name: 🔍 Verify deployment
        run: |
          kubectl get pods -n omnitide-production
          kubectl get services -n omnitide-production

      - name: 📊 Update deployment status
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "production",
              "description": "Deployed version ${{ needs.create-release.outputs.version }}",
              "auto_merge": false
            }'

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📢 Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🌊 OmniTide Deployment ${{ job.status }}!
            Version: ${{ needs.create-release.outputs.version || 'staging' }}
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
